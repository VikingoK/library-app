// Mocks generated by Mockito 5.4.4 from annotations
// in librery_app/test/books/data/repositories/book_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:either_dart/either.dart' as _i4;
import 'package:librery_app/core/errors/base_error.dart' as _i5;
import 'package:librery_app/features/books/data/repositories/book_repository_impl.dart'
    as _i2;
import 'package:librery_app/features/books/domain/entities/book_detail/book_detail.dart'
    as _i8;
import 'package:librery_app/features/books/domain/entities/book_list/book_list.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepositoryImpl extends _i1.Mock
    implements _i2.BookRepositoryImpl {
  MockBookRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>> searchBooks(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchBooks,
          [query],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>>.value(
            _i7.dummyValue<_i4.Either<_i5.BaseError, _i6.BookList>>(
          this,
          Invocation.method(
            #searchBooks,
            [query],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>>);

  @override
  _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>> getNewBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewBooks,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>>.value(
            _i7.dummyValue<_i4.Either<_i5.BaseError, _i6.BookList>>(
          this,
          Invocation.method(
            #getNewBooks,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.BaseError, _i6.BookList>>);

  @override
  _i3.Future<_i4.Either<_i5.BaseError, _i8.BookDetail>> getBookDetail(
          String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetail,
          [code],
        ),
        returnValue:
            _i3.Future<_i4.Either<_i5.BaseError, _i8.BookDetail>>.value(
                _i7.dummyValue<_i4.Either<_i5.BaseError, _i8.BookDetail>>(
          this,
          Invocation.method(
            #getBookDetail,
            [code],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.BaseError, _i8.BookDetail>>);
}
