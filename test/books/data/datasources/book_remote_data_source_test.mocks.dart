// Mocks generated by Mockito 5.4.4 from annotations
// in librery_app/test/books/data/datasources/book_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:either_dart/either.dart' as _i5;
import 'package:librery_app/core/errors/base_error.dart' as _i6;
import 'package:librery_app/core/network/dio_http_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioHttpClient extends _i1.Mock implements _i3.DioHttpClient {
  MockDioHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i4.Future<_i5.Either<L, R>> getRequest<L extends _i6.BaseError, R>({
    required String? endpoint,
    Map<String, dynamic>? queryParams,
    Map<String, String>? headers,
    required R Function(dynamic)? builder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [],
          {
            #endpoint: endpoint,
            #queryParams: queryParams,
            #headers: headers,
            #builder: builder,
          },
        ),
        returnValue:
            _i4.Future<_i5.Either<L, R>>.value(_i7.dummyValue<_i5.Either<L, R>>(
          this,
          Invocation.method(
            #getRequest,
            [],
            {
              #endpoint: endpoint,
              #queryParams: queryParams,
              #headers: headers,
              #builder: builder,
            },
          ),
        )),
      ) as _i4.Future<_i5.Either<L, R>>);

  @override
  _i4.Future<_i2.Response<dynamic>> postRequest({
    required String? endpoint,
    Map<String, dynamic>? body,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [],
          {
            #endpoint: endpoint,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<_i2.Response<dynamic>>.value(_FakeResponse_1<dynamic>(
          this,
          Invocation.method(
            #postRequest,
            [],
            {
              #endpoint: endpoint,
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response<dynamic>>);
}
